{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  if (!scheduler) {\n    return new Observable(subscribeToIterable(input));\n  } else {\n    return new Observable(function (subscriber) {\n      var sub = new Subscription();\n      var iterator;\n      sub.add(function () {\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(function () {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n\n          var value;\n          var done;\n\n          try {\n            var result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n} //# sourceMappingURL=fromIterable.js.map","map":{"version":3,"sources":["C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/angular-datatables/node_modules/rxjs/_esm2015/internal/observable/fromIterable.js"],"names":["Observable","Subscription","iterator","Symbol_iterator","subscribeToIterable","fromIterable","input","scheduler","Error","subscriber","sub","add","return","schedule","closed","value","done","result","next","err","error","complete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAQ,IAAIC,eAArB,QAA4C,oBAA5C;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6BC,SAA7B,EAAwC;AAC3C,MAAI,CAACD,KAAL,EAAY;AACR,UAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACD,MAAI,CAACD,SAAL,EAAgB;AACZ,WAAO,IAAIP,UAAJ,CAAeI,mBAAmB,CAACE,KAAD,CAAlC,CAAP;AACH,GAFD,MAGK;AACD,WAAO,IAAIN,UAAJ,CAAe,UAAAS,UAAU,EAAI;AAChC,UAAMC,GAAG,GAAG,IAAIT,YAAJ,EAAZ;AACA,UAAIC,QAAJ;AACAQ,MAAAA,GAAG,CAACC,GAAJ,CAAQ,YAAM;AACV,YAAIT,QAAQ,IAAI,OAAOA,QAAQ,CAACU,MAAhB,KAA2B,UAA3C,EAAuD;AACnDV,UAAAA,QAAQ,CAACU,MAAT;AACH;AACJ,OAJD;AAKAF,MAAAA,GAAG,CAACC,GAAJ,CAAQJ,SAAS,CAACM,QAAV,CAAmB,YAAM;AAC7BX,QAAAA,QAAQ,GAAGI,KAAK,CAACH,eAAD,CAAL,EAAX;AACAO,QAAAA,GAAG,CAACC,GAAJ,CAAQJ,SAAS,CAACM,QAAV,CAAmB,YAAY;AACnC,cAAIJ,UAAU,CAACK,MAAf,EAAuB;AACnB;AACH;;AACD,cAAIC,KAAJ;AACA,cAAIC,IAAJ;;AACA,cAAI;AACA,gBAAMC,MAAM,GAAGf,QAAQ,CAACgB,IAAT,EAAf;AACAH,YAAAA,KAAK,GAAGE,MAAM,CAACF,KAAf;AACAC,YAAAA,IAAI,GAAGC,MAAM,CAACD,IAAd;AACH,WAJD,CAKA,OAAOG,GAAP,EAAY;AACRV,YAAAA,UAAU,CAACW,KAAX,CAAiBD,GAAjB;AACA;AACH;;AACD,cAAIH,IAAJ,EAAU;AACNP,YAAAA,UAAU,CAACY,QAAX;AACH,WAFD,MAGK;AACDZ,YAAAA,UAAU,CAACS,IAAX,CAAgBH,KAAhB;AACA,iBAAKF,QAAL;AACH;AACJ,SAtBO,CAAR;AAuBH,OAzBO,CAAR;AA0BA,aAAOH,GAAP;AACH,KAnCM,CAAP;AAoCH;AACJ,C,CACD","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let iterator;\n            sub.add(() => {\n                if (iterator && typeof iterator.return === 'function') {\n                    iterator.return();\n                }\n            });\n            sub.add(scheduler.schedule(() => {\n                iterator = input[Symbol_iterator]();\n                sub.add(scheduler.schedule(function () {\n                    if (subscriber.closed) {\n                        return;\n                    }\n                    let value;\n                    let done;\n                    try {\n                        const result = iterator.next();\n                        value = result.value;\n                        done = result.done;\n                    }\n                    catch (err) {\n                        subscriber.error(err);\n                        return;\n                    }\n                    if (done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(value);\n                        this.schedule();\n                    }\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromIterable.js.map"]},"metadata":{},"sourceType":"module"}