{"ast":null,"code":"import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n  if (!scheduler) {\n    return new Observable(subscribeToArray(input));\n  } else {\n    return new Observable(function (subscriber) {\n      var sub = new Subscription();\n      var i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n\n        subscriber.next(input[i++]);\n\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n} //# sourceMappingURL=fromArray.js.map","map":{"version":3,"sources":["C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/angular-datatables/node_modules/rxjs/_esm2015/internal/observable/fromArray.js"],"names":["Observable","Subscription","subscribeToArray","fromArray","input","scheduler","subscriber","sub","i","add","schedule","length","complete","next","closed"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,SAA1B,EAAqC;AACxC,MAAI,CAACA,SAAL,EAAgB;AACZ,WAAO,IAAIL,UAAJ,CAAeE,gBAAgB,CAACE,KAAD,CAA/B,CAAP;AACH,GAFD,MAGK;AACD,WAAO,IAAIJ,UAAJ,CAAe,UAAAM,UAAU,EAAI;AAChC,UAAMC,GAAG,GAAG,IAAIN,YAAJ,EAAZ;AACA,UAAIO,CAAC,GAAG,CAAR;AACAD,MAAAA,GAAG,CAACE,GAAJ,CAAQJ,SAAS,CAACK,QAAV,CAAmB,YAAY;AACnC,YAAIF,CAAC,KAAKJ,KAAK,CAACO,MAAhB,EAAwB;AACpBL,UAAAA,UAAU,CAACM,QAAX;AACA;AACH;;AACDN,QAAAA,UAAU,CAACO,IAAX,CAAgBT,KAAK,CAACI,CAAC,EAAF,CAArB;;AACA,YAAI,CAACF,UAAU,CAACQ,MAAhB,EAAwB;AACpBP,UAAAA,GAAG,CAACE,GAAJ,CAAQ,KAAKC,QAAL,EAAR;AACH;AACJ,OATO,CAAR;AAUA,aAAOH,GAAP;AACH,KAdM,CAAP;AAeH;AACJ,C,CACD","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(subscriber => {\n            const sub = new Subscription();\n            let i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map"]},"metadata":{},"sourceType":"module"}