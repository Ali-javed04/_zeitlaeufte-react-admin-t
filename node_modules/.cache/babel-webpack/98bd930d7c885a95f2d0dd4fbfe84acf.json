{"ast":null,"code":"import _classCallCheck from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  var resultSelector;\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    resultSelector = sources.pop();\n  }\n\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0];\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    return forkJoin(sources).pipe(map(function (args) {\n      return resultSelector.apply(void 0, _toConsumableArray(args));\n    }));\n  }\n\n  return new Observable(function (subscriber) {\n    return new ForkJoinSubscriber(subscriber, sources);\n  });\n}\n\nvar ForkJoinSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(ForkJoinSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(ForkJoinSubscriber);\n\n  function ForkJoinSubscriber(destination, sources) {\n    var _this;\n\n    _classCallCheck(this, ForkJoinSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.sources = sources;\n    _this.completed = 0;\n    _this.haveValues = 0;\n    var len = sources.length;\n    _this.values = new Array(len);\n\n    for (var i = 0; i < len; i++) {\n      var source = sources[i];\n      var innerSubscription = subscribeToResult(_assertThisInitialized(_this), source, null, i);\n\n      if (innerSubscription) {\n        _this.add(innerSubscription);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(ForkJoinSubscriber, [{\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      this.values[outerIndex] = innerValue;\n\n      if (!innerSub._hasValue) {\n        innerSub._hasValue = true;\n        this.haveValues++;\n      }\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(innerSub) {\n      var destination = this.destination,\n          haveValues = this.haveValues,\n          values = this.values;\n      var len = values.length;\n\n      if (!innerSub._hasValue) {\n        destination.complete();\n        return;\n      }\n\n      this.completed++;\n\n      if (this.completed !== len) {\n        return;\n      }\n\n      if (haveValues === len) {\n        destination.next(values);\n      }\n\n      destination.complete();\n    }\n  }]);\n\n  return ForkJoinSubscriber;\n}(OuterSubscriber); //# sourceMappingURL=forkJoin.js.map","map":{"version":3,"sources":["C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/angular-datatables/node_modules/rxjs/_esm2015/internal/observable/forkJoin.js"],"names":["Observable","isArray","EMPTY","subscribeToResult","OuterSubscriber","map","forkJoin","sources","resultSelector","length","pop","pipe","args","subscriber","ForkJoinSubscriber","destination","completed","haveValues","len","values","Array","i","source","innerSubscription","add","outerValue","innerValue","outerIndex","innerIndex","innerSub","_hasValue","complete","next"],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from '../operators/map';\nexport function forkJoin(...sources) {\n    let resultSelector;\n    if (typeof sources[sources.length - 1] === 'function') {\n        resultSelector = sources.pop();\n    }\n    if (sources.length === 1 && isArray(sources[0])) {\n        sources = sources[0];\n    }\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    if (resultSelector) {\n        return forkJoin(sources).pipe(map(args => resultSelector(...args)));\n    }\n    return new Observable(subscriber => {\n        return new ForkJoinSubscriber(subscriber, sources);\n    });\n}\nclass ForkJoinSubscriber extends OuterSubscriber {\n    constructor(destination, sources) {\n        super(destination);\n        this.sources = sources;\n        this.completed = 0;\n        this.haveValues = 0;\n        const len = sources.length;\n        this.values = new Array(len);\n        for (let i = 0; i < len; i++) {\n            const source = sources[i];\n            const innerSubscription = subscribeToResult(this, source, null, i);\n            if (innerSubscription) {\n                this.add(innerSubscription);\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        if (!innerSub._hasValue) {\n            innerSub._hasValue = true;\n            this.haveValues++;\n        }\n    }\n    notifyComplete(innerSub) {\n        const { destination, haveValues, values } = this;\n        const len = values.length;\n        if (!innerSub._hasValue) {\n            destination.complete();\n            return;\n        }\n        this.completed++;\n        if (this.completed !== len) {\n            return;\n        }\n        if (haveValues === len) {\n            destination.next(values);\n        }\n        destination.complete();\n    }\n}\n//# sourceMappingURL=forkJoin.js.map"]},"metadata":{},"sourceType":"module"}