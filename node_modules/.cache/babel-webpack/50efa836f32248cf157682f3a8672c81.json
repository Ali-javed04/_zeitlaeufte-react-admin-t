{"ast":null,"code":"import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function subscribeTo(result) {\n  if (result instanceof Observable) {\n    return function (subscriber) {\n      if (result._isScalar) {\n        subscriber.next(result.value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (!!result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result);\n  } else if (!!result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result);\n  } else {\n    var value = isObject(result) ? 'an invalid object' : \"'\".concat(result, \"'\");\n    var msg = \"You provided \".concat(value, \" where a stream was expected.\") + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n}; //# sourceMappingURL=subscribeTo.js.map","map":{"version":3,"sources":["C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/angular-datatables/node_modules/rxjs/_esm2015/internal/util/subscribeTo.js"],"names":["Observable","subscribeToArray","subscribeToPromise","subscribeToIterable","subscribeToObservable","isArrayLike","isPromise","isObject","iterator","Symbol_iterator","observable","Symbol_observable","subscribeTo","result","subscriber","_isScalar","next","value","complete","undefined","subscribe","msg","TypeError"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,QAAQ,IAAIC,eAArB,QAA4C,oBAA5C;AACA,SAASC,UAAU,IAAIC,iBAAvB,QAAgD,sBAAhD;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,MAAD,EAAY;AACnC,MAAIA,MAAM,YAAYb,UAAtB,EAAkC;AAC9B,WAAO,UAACc,UAAD,EAAgB;AACnB,UAAID,MAAM,CAACE,SAAX,EAAsB;AAClBD,QAAAA,UAAU,CAACE,IAAX,CAAgBH,MAAM,CAACI,KAAvB;AACAH,QAAAA,UAAU,CAACI,QAAX;AACA,eAAOC,SAAP;AACH,OAJD,MAKK;AACD,eAAON,MAAM,CAACO,SAAP,CAAiBN,UAAjB,CAAP;AACH;AACJ,KATD;AAUH,GAXD,MAYK,IAAI,CAAC,CAACD,MAAF,IAAY,OAAOA,MAAM,CAACF,iBAAD,CAAb,KAAqC,UAArD,EAAiE;AAClE,WAAOP,qBAAqB,CAACS,MAAD,CAA5B;AACH,GAFI,MAGA,IAAIR,WAAW,CAACQ,MAAD,CAAf,EAAyB;AAC1B,WAAOZ,gBAAgB,CAACY,MAAD,CAAvB;AACH,GAFI,MAGA,IAAIP,SAAS,CAACO,MAAD,CAAb,EAAuB;AACxB,WAAOX,kBAAkB,CAACW,MAAD,CAAzB;AACH,GAFI,MAGA,IAAI,CAAC,CAACA,MAAF,IAAY,OAAOA,MAAM,CAACJ,eAAD,CAAb,KAAmC,UAAnD,EAA+D;AAChE,WAAON,mBAAmB,CAACU,MAAD,CAA1B;AACH,GAFI,MAGA;AACD,QAAMI,KAAK,GAAGV,QAAQ,CAACM,MAAD,CAAR,GAAmB,mBAAnB,cAA6CA,MAA7C,MAAd;AACA,QAAMQ,GAAG,GAAG,uBAAgBJ,KAAhB,qCACN,8DADN;AAEA,UAAM,IAAIK,SAAJ,CAAcD,GAAd,CAAN;AACH;AACJ,CA/BM,C,CAgCP","sourcesContent":["import { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport const subscribeTo = (result) => {\n    if (result instanceof Observable) {\n        return (subscriber) => {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (!!result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (!!result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else {\n        const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n        const msg = `You provided ${value} where a stream was expected.`\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map"]},"metadata":{},"sourceType":"module"}