{"ast":null,"code":"import _classCallCheck from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, Output, forwardRef } from '@angular/core';\nimport FroalaEditor from 'froala-editor';\nimport * as i0 from \"@angular/core\";\nexport var FroalaEditorDirective = /*#__PURE__*/function () {\n  function FroalaEditorDirective(el, zone) {\n    _classCallCheck(this, FroalaEditorDirective);\n\n    this.zone = zone; // editor options\n\n    this._opts = {\n      immediateAngularModelUpdate: false,\n      angularIgnoreAttrs: null\n    };\n    this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];\n    this.INNER_HTML_ATTR = 'innerHTML';\n    this._hasSpecialTag = false;\n    this._editorInitialized = false;\n    this._oldModel = null; // Begin ControlValueAccesor methods.\n\n    this.onChange = function (_) {};\n\n    this.onTouched = function () {}; // froalaModel directive as output: update model if editor contentChanged\n\n\n    this.froalaModelChange = new EventEmitter(); // froalaInit directive as output: send manual editor initialization\n\n    this.froalaInit = new EventEmitter();\n    var element = el.nativeElement; // check if the element is a special tag\n\n    if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n      this._hasSpecialTag = true;\n    }\n\n    this._element = element;\n    this.zone = zone;\n  } // Form model content changed.\n\n\n  _createClass(FroalaEditorDirective, [{\n    key: \"writeValue\",\n    value: function writeValue(content) {\n      this.updateEditor(content);\n    }\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    } // End ControlValueAccesor methods.\n    // froalaEditor directive as input: store the editor options\n\n  }, {\n    key: \"froalaEditor\",\n    set: function set(opts) {\n      this._opts = this.clone(opts || this._opts);\n      this._opts = Object.assign({}, this._opts);\n    } // TODO: replace clone method with better possible alternate \n\n  }, {\n    key: \"clone\",\n    value: function clone(item) {\n      var me = this;\n\n      if (!item) {\n        return item;\n      } // null, undefined values check\n\n\n      var types = [Number, String, Boolean],\n          result; // normalizing primitives if someone did new String('aaa'), or new Number('444');\n\n      types.forEach(function (type) {\n        if (item instanceof type) {\n          result = type(item);\n        }\n      });\n\n      if (typeof result == \"undefined\") {\n        if (Object.prototype.toString.call(item) === \"[object Array]\") {\n          result = [];\n          item.forEach(function (child, index, array) {\n            result[index] = me.clone(child);\n          });\n        } else if (typeof item == \"object\") {\n          // testing that this is DOM\n          if (item.nodeType && typeof item.cloneNode == \"function\") {\n            result = item.cloneNode(true);\n          } else if (!item.prototype) {\n            // check that this is a literal\n            if (item instanceof Date) {\n              result = new Date(item);\n            } else {\n              // it is an object literal\n              result = {};\n\n              for (var i in item) {\n                result[i] = me.clone(item[i]);\n              }\n            }\n          } else {\n            if (false && item.constructor) {\n              result = new item.constructor();\n            } else {\n              result = item;\n            }\n          }\n        } else {\n          result = item;\n        }\n      }\n\n      return result;\n    } // froalaModel directive as input: store initial editor content\n\n  }, {\n    key: \"froalaModel\",\n    set: function set(content) {\n      this.updateEditor(content);\n    } // Update editor with model contents.\n\n  }, {\n    key: \"updateEditor\",\n    value: function updateEditor(content) {\n      if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n        return;\n      }\n\n      if (!this._hasSpecialTag) {\n        this._oldModel = content;\n      } else {\n        this._model = content;\n      }\n\n      if (this._editorInitialized) {\n        if (!this._hasSpecialTag) {\n          this._editor.html.set(content);\n        } else {\n          this.setContent();\n        }\n      } else {\n        if (!this._hasSpecialTag) {\n          this._element.innerHTML = content || '';\n        } else {\n          this.setContent();\n        }\n      }\n    } // update model if editor contentChanged\n\n  }, {\n    key: \"updateModel\",\n    value: function updateModel() {\n      var _this = this;\n\n      this.zone.run(function () {\n        var modelContent = null;\n\n        if (_this._hasSpecialTag) {\n          var attributeNodes = _this._element.attributes;\n          var attrs = {};\n\n          for (var i = 0; i < attributeNodes.length; i++) {\n            var attrName = attributeNodes[i].name;\n\n            if (_this._opts.angularIgnoreAttrs && _this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\n              continue;\n            }\n\n            attrs[attrName] = attributeNodes[i].value;\n          }\n\n          if (_this._element.innerHTML) {\n            attrs[_this.INNER_HTML_ATTR] = _this._element.innerHTML;\n          }\n\n          modelContent = attrs;\n        } else {\n          var returnedHtml = _this._editor.html.get();\n\n          if (typeof returnedHtml === 'string') {\n            modelContent = returnedHtml;\n          }\n        }\n\n        if (_this._oldModel !== modelContent) {\n          _this._oldModel = modelContent; // Update froalaModel.\n\n          _this.froalaModelChange.emit(modelContent); // Update form model.\n\n\n          _this.onChange(modelContent);\n        }\n      });\n    }\n  }, {\n    key: \"registerEvent\",\n    value: function registerEvent(eventName, callback) {\n      if (!eventName || !callback) {\n        return;\n      }\n\n      if (!this._opts.events) {\n        this._opts.events = {};\n      }\n\n      this._opts.events[eventName] = callback;\n    }\n  }, {\n    key: \"initListeners\",\n    value: function initListeners() {\n      var self = this; // Check if we have events on the editor.\n\n      if (this._editor.events) {\n        // bind contentChange and keyup event to froalaModel\n        this._editor.events.on('contentChanged', function () {\n          self.updateModel();\n        });\n\n        this._editor.events.on('mousedown', function () {\n          setTimeout(function () {\n            self.onTouched();\n          }, 0);\n        });\n\n        if (this._opts.immediateAngularModelUpdate) {\n          this._editor.events.on('keyup', function () {\n            setTimeout(function () {\n              self.updateModel();\n            }, 0);\n          });\n        }\n      }\n\n      this._editorInitialized = true;\n    }\n  }, {\n    key: \"createEditor\",\n    value: function createEditor() {\n      var _this2 = this;\n\n      if (this._editorInitialized) {\n        return;\n      }\n\n      this.setContent(true); // init editor\n\n      this.zone.runOutsideAngular(function () {\n        // Add listeners on initialized event.\n        if (!_this2._opts.events) _this2._opts.events = {}; // Register initialized event.\n\n        _this2.registerEvent('initialized', _this2._opts.events && _this2._opts.events.initialized);\n\n        var existingInitCallback = _this2._opts.events.initialized; // Default initialized event.\n\n        if (!_this2._opts.events.initialized || !_this2._opts.events.initialized.overridden) {\n          _this2._opts.events.initialized = function () {\n            _this2.initListeners();\n\n            existingInitCallback && existingInitCallback.call(_this2._editor, _this2);\n          };\n\n          _this2._opts.events.initialized.overridden = true;\n        } // Initialize the Froala Editor.\n\n\n        _this2._editor = new FroalaEditor(_this2._element, _this2._opts);\n      });\n    }\n  }, {\n    key: \"setHtml\",\n    value: function setHtml() {\n      this._editor.html.set(this._model || \"\"); // This will reset the undo stack everytime the model changes externally. Can we fix this?\n\n\n      this._editor.undo.reset();\n\n      this._editor.undo.saveStep();\n    }\n  }, {\n    key: \"setContent\",\n    value: function setContent() {\n      var firstTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var self = this; // Set initial content\n\n      if (this._model || this._model == '') {\n        this._oldModel = this._model;\n\n        if (this._hasSpecialTag) {\n          var tags = this._model; // add tags on element\n\n          if (tags) {\n            for (var attr in tags) {\n              if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n                this._element.setAttribute(attr, tags[attr]);\n              }\n            }\n\n            if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n              this._element.innerHTML = tags[this.INNER_HTML_ATTR];\n            }\n          }\n        } else {\n          if (firstTime) {\n            this.registerEvent('initialized', function () {\n              self.setHtml();\n            });\n          } else {\n            self.setHtml();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"destroyEditor\",\n    value: function destroyEditor() {\n      if (this._editorInitialized) {\n        this._editor.destroy();\n\n        this._editorInitialized = false;\n      }\n    }\n  }, {\n    key: \"getEditor\",\n    value: function getEditor() {\n      if (this._element) {\n        return this._editor;\n      }\n\n      return null;\n    } // send manual editor initialization\n\n  }, {\n    key: \"generateManualController\",\n    value: function generateManualController() {\n      var controls = {\n        initialize: this.createEditor.bind(this),\n        destroy: this.destroyEditor.bind(this),\n        getEditor: this.getEditor.bind(this)\n      };\n      this.froalaInit.emit(controls);\n    } // TODO not sure if ngOnInit is executed after @inputs\n\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n      if (!this.froalaInit.observers.length) {\n        this.createEditor();\n      } else {\n        this.generateManualController();\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.destroyEditor();\n    }\n  }]);\n\n  return FroalaEditorDirective;\n}();\n\nFroalaEditorDirective.ɵfac = function FroalaEditorDirective_Factory(t) {\n  return new (t || FroalaEditorDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nFroalaEditorDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: FroalaEditorDirective,\n  selectors: [[\"\", \"froalaEditor\", \"\"]],\n  inputs: {\n    froalaEditor: \"froalaEditor\",\n    froalaModel: \"froalaModel\"\n  },\n  outputs: {\n    froalaModelChange: \"froalaModelChange\",\n    froalaInit: \"froalaInit\"\n  },\n  exportAs: [\"froalaEditor\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return FroalaEditorDirective;\n    }),\n    multi: true\n  }])]\n});\n/*@__PURE__*/\n\n(function () {\n  i0.ɵsetClassMetadata(FroalaEditorDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[froalaEditor]',\n      exportAs: 'froalaEditor',\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return FroalaEditorDirective;\n        }),\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    froalaEditor: [{\n      type: Input\n    }],\n    froalaModel: [{\n      type: Input\n    }],\n    froalaModelChange: [{\n      type: Output\n    }],\n    froalaInit: [{\n      type: Output\n    }]\n  });\n})(); //# sourceMappingURL=editor.directive.js.map","map":{"version":3,"sources":["C:/Users/beetechnica-1/hamza/_zeitlaeufte-react-admin-t/node_modules/angular-froala-wysiwyg/editor/editor.directive.js"],"names":["NG_VALUE_ACCESSOR","Directive","ElementRef","EventEmitter","Input","NgZone","Output","forwardRef","FroalaEditor","i0","FroalaEditorDirective","el","zone","_opts","immediateAngularModelUpdate","angularIgnoreAttrs","SPECIAL_TAGS","INNER_HTML_ATTR","_hasSpecialTag","_editorInitialized","_oldModel","onChange","_","onTouched","froalaModelChange","froalaInit","element","nativeElement","indexOf","tagName","toLowerCase","_element","content","updateEditor","fn","opts","clone","Object","assign","item","me","types","Number","String","Boolean","result","forEach","type","prototype","toString","call","child","index","array","nodeType","cloneNode","Date","i","constructor","JSON","stringify","_model","_editor","html","set","setContent","innerHTML","run","modelContent","attributeNodes","attributes","attrs","length","attrName","name","value","returnedHtml","get","emit","eventName","callback","events","self","on","updateModel","setTimeout","runOutsideAngular","registerEvent","initialized","existingInitCallback","overridden","initListeners","undo","reset","saveStep","firstTime","tags","attr","hasOwnProperty","setAttribute","setHtml","destroy","controls","initialize","createEditor","bind","destroyEditor","getEditor","observers","generateManualController","ɵfac","FroalaEditorDirective_Factory","t","ɵɵdirectiveInject","ɵdir","ɵɵdefineDirective","selectors","inputs","froalaEditor","froalaModel","outputs","exportAs","features","ɵɵProvidersFeature","provide","useExisting","multi","ɵsetClassMetadata","args","selector","providers"],"mappings":"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","sourcesContent":["import { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { Directive, ElementRef, EventEmitter, Input, NgZone, Output, forwardRef } from '@angular/core';\nimport FroalaEditor from 'froala-editor';\nimport * as i0 from \"@angular/core\";\nexport class FroalaEditorDirective {\n    constructor(el, zone) {\n        this.zone = zone;\n        // editor options\n        this._opts = {\n            immediateAngularModelUpdate: false,\n            angularIgnoreAttrs: null\n        };\n        this.SPECIAL_TAGS = ['img', 'button', 'input', 'a'];\n        this.INNER_HTML_ATTR = 'innerHTML';\n        this._hasSpecialTag = false;\n        this._editorInitialized = false;\n        this._oldModel = null;\n        // Begin ControlValueAccesor methods.\n        this.onChange = (_) => { };\n        this.onTouched = () => { };\n        // froalaModel directive as output: update model if editor contentChanged\n        this.froalaModelChange = new EventEmitter();\n        // froalaInit directive as output: send manual editor initialization\n        this.froalaInit = new EventEmitter();\n        let element = el.nativeElement;\n        // check if the element is a special tag\n        if (this.SPECIAL_TAGS.indexOf(element.tagName.toLowerCase()) != -1) {\n            this._hasSpecialTag = true;\n        }\n        this._element = element;\n        this.zone = zone;\n    }\n    // Form model content changed.\n    writeValue(content) {\n        this.updateEditor(content);\n    }\n    registerOnChange(fn) { this.onChange = fn; }\n    registerOnTouched(fn) { this.onTouched = fn; }\n    // End ControlValueAccesor methods.\n    // froalaEditor directive as input: store the editor options\n    set froalaEditor(opts) {\n        this._opts = this.clone(opts || this._opts);\n        this._opts = Object.assign({}, this._opts);\n    }\n    // TODO: replace clone method with better possible alternate \n    clone(item) {\n        const me = this;\n        if (!item) {\n            return item;\n        } // null, undefined values check\n        let types = [Number, String, Boolean], result;\n        // normalizing primitives if someone did new String('aaa'), or new Number('444');\n        types.forEach(function (type) {\n            if (item instanceof type) {\n                result = type(item);\n            }\n        });\n        if (typeof result == \"undefined\") {\n            if (Object.prototype.toString.call(item) === \"[object Array]\") {\n                result = [];\n                item.forEach(function (child, index, array) {\n                    result[index] = me.clone(child);\n                });\n            }\n            else if (typeof item == \"object\") {\n                // testing that this is DOM\n                if (item.nodeType && typeof item.cloneNode == \"function\") {\n                    result = item.cloneNode(true);\n                }\n                else if (!item.prototype) { // check that this is a literal\n                    if (item instanceof Date) {\n                        result = new Date(item);\n                    }\n                    else {\n                        // it is an object literal\n                        result = {};\n                        for (var i in item) {\n                            result[i] = me.clone(item[i]);\n                        }\n                    }\n                }\n                else {\n                    if (false && item.constructor) {\n                        result = new item.constructor();\n                    }\n                    else {\n                        result = item;\n                    }\n                }\n            }\n            else {\n                result = item;\n            }\n        }\n        return result;\n    }\n    // froalaModel directive as input: store initial editor content\n    set froalaModel(content) {\n        this.updateEditor(content);\n    }\n    // Update editor with model contents.\n    updateEditor(content) {\n        if (JSON.stringify(this._oldModel) == JSON.stringify(content)) {\n            return;\n        }\n        if (!this._hasSpecialTag) {\n            this._oldModel = content;\n        }\n        else {\n            this._model = content;\n        }\n        if (this._editorInitialized) {\n            if (!this._hasSpecialTag) {\n                this._editor.html.set(content);\n            }\n            else {\n                this.setContent();\n            }\n        }\n        else {\n            if (!this._hasSpecialTag) {\n                this._element.innerHTML = content || '';\n            }\n            else {\n                this.setContent();\n            }\n        }\n    }\n    // update model if editor contentChanged\n    updateModel() {\n        this.zone.run(() => {\n            let modelContent = null;\n            if (this._hasSpecialTag) {\n                let attributeNodes = this._element.attributes;\n                let attrs = {};\n                for (let i = 0; i < attributeNodes.length; i++) {\n                    let attrName = attributeNodes[i].name;\n                    if (this._opts.angularIgnoreAttrs && this._opts.angularIgnoreAttrs.indexOf(attrName) != -1) {\n                        continue;\n                    }\n                    attrs[attrName] = attributeNodes[i].value;\n                }\n                if (this._element.innerHTML) {\n                    attrs[this.INNER_HTML_ATTR] = this._element.innerHTML;\n                }\n                modelContent = attrs;\n            }\n            else {\n                let returnedHtml = this._editor.html.get();\n                if (typeof returnedHtml === 'string') {\n                    modelContent = returnedHtml;\n                }\n            }\n            if (this._oldModel !== modelContent) {\n                this._oldModel = modelContent;\n                // Update froalaModel.\n                this.froalaModelChange.emit(modelContent);\n                // Update form model.\n                this.onChange(modelContent);\n            }\n        });\n    }\n    registerEvent(eventName, callback) {\n        if (!eventName || !callback) {\n            return;\n        }\n        if (!this._opts.events) {\n            this._opts.events = {};\n        }\n        this._opts.events[eventName] = callback;\n    }\n    initListeners() {\n        let self = this;\n        // Check if we have events on the editor.\n        if (this._editor.events) {\n            // bind contentChange and keyup event to froalaModel\n            this._editor.events.on('contentChanged', function () {\n                self.updateModel();\n            });\n            this._editor.events.on('mousedown', function () {\n                setTimeout(function () {\n                    self.onTouched();\n                }, 0);\n            });\n            if (this._opts.immediateAngularModelUpdate) {\n                this._editor.events.on('keyup', function () {\n                    setTimeout(function () {\n                        self.updateModel();\n                    }, 0);\n                });\n            }\n        }\n        this._editorInitialized = true;\n    }\n    createEditor() {\n        if (this._editorInitialized) {\n            return;\n        }\n        this.setContent(true);\n        // init editor\n        this.zone.runOutsideAngular(() => {\n            // Add listeners on initialized event.\n            if (!this._opts.events)\n                this._opts.events = {};\n            // Register initialized event.\n            this.registerEvent('initialized', this._opts.events && this._opts.events.initialized);\n            const existingInitCallback = this._opts.events.initialized;\n            // Default initialized event.\n            if (!this._opts.events.initialized || !this._opts.events.initialized.overridden) {\n                this._opts.events.initialized = () => {\n                    this.initListeners();\n                    existingInitCallback && existingInitCallback.call(this._editor, this);\n                };\n                this._opts.events.initialized.overridden = true;\n            }\n            // Initialize the Froala Editor.\n            this._editor = new FroalaEditor(this._element, this._opts);\n        });\n    }\n    setHtml() {\n        this._editor.html.set(this._model || \"\");\n        // This will reset the undo stack everytime the model changes externally. Can we fix this?\n        this._editor.undo.reset();\n        this._editor.undo.saveStep();\n    }\n    setContent(firstTime = false) {\n        let self = this;\n        // Set initial content\n        if (this._model || this._model == '') {\n            this._oldModel = this._model;\n            if (this._hasSpecialTag) {\n                let tags = this._model;\n                // add tags on element\n                if (tags) {\n                    for (let attr in tags) {\n                        if (tags.hasOwnProperty(attr) && attr != this.INNER_HTML_ATTR) {\n                            this._element.setAttribute(attr, tags[attr]);\n                        }\n                    }\n                    if (tags.hasOwnProperty(this.INNER_HTML_ATTR)) {\n                        this._element.innerHTML = tags[this.INNER_HTML_ATTR];\n                    }\n                }\n            }\n            else {\n                if (firstTime) {\n                    this.registerEvent('initialized', function () {\n                        self.setHtml();\n                    });\n                }\n                else {\n                    self.setHtml();\n                }\n            }\n        }\n    }\n    destroyEditor() {\n        if (this._editorInitialized) {\n            this._editor.destroy();\n            this._editorInitialized = false;\n        }\n    }\n    getEditor() {\n        if (this._element) {\n            return this._editor;\n        }\n        return null;\n    }\n    // send manual editor initialization\n    generateManualController() {\n        let controls = {\n            initialize: this.createEditor.bind(this),\n            destroy: this.destroyEditor.bind(this),\n            getEditor: this.getEditor.bind(this),\n        };\n        this.froalaInit.emit(controls);\n    }\n    // TODO not sure if ngOnInit is executed after @inputs\n    ngAfterViewInit() {\n        // check if output froalaInit is present. Maybe observers is private and should not be used?? TODO how to better test that an output directive is present.\n        if (!this.froalaInit.observers.length) {\n            this.createEditor();\n        }\n        else {\n            this.generateManualController();\n        }\n    }\n    ngOnDestroy() {\n        this.destroyEditor();\n    }\n}\nFroalaEditorDirective.ɵfac = function FroalaEditorDirective_Factory(t) { return new (t || FroalaEditorDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone)); };\nFroalaEditorDirective.ɵdir = i0.ɵɵdefineDirective({ type: FroalaEditorDirective, selectors: [[\"\", \"froalaEditor\", \"\"]], inputs: { froalaEditor: \"froalaEditor\", froalaModel: \"froalaModel\" }, outputs: { froalaModelChange: \"froalaModelChange\", froalaInit: \"froalaInit\" }, exportAs: [\"froalaEditor\"], features: [i0.ɵɵProvidersFeature([{\n                provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FroalaEditorDirective),\n                multi: true\n            }])] });\n/*@__PURE__*/ (function () { i0.ɵsetClassMetadata(FroalaEditorDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[froalaEditor]',\n                exportAs: 'froalaEditor',\n                providers: [{\n                        provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FroalaEditorDirective),\n                        multi: true\n                    }]\n            }]\n    }], function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, { froalaEditor: [{\n            type: Input\n        }], froalaModel: [{\n            type: Input\n        }], froalaModelChange: [{\n            type: Output\n        }], froalaInit: [{\n            type: Output\n        }] }); })();\n//# sourceMappingURL=editor.directive.js.map"]},"metadata":{},"sourceType":"module"}